[
    {
        "id": "fab23692fcecca97",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6684f9d624997184",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "9341c9d4c7a2bc9e",
        "type": "http in",
        "z": "fab23692fcecca97",
        "name": "",
        "url": "/api/tickets",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "eafc5410b1b3d53c"
            ]
        ]
    },
    {
        "id": "7d32a4f25f27a9a5",
        "type": "comment",
        "z": "fab23692fcecca97",
        "name": "Create new ticket",
        "info": "",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "eafc5410b1b3d53c",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Extract options",
        "func": "msg.createTicketBody = {\n    cardType: 'qr',\n    fareType: 0\n}; // request body for ticket creation\n\nmsg.topupBalanceBody = {\n    amount: 0,\n    location: 0\n}; // request body for balance topup\n\nmsg.topupPassBody = {\n    product: 0,\n    duration: 0,\n    location: 0\n}; // request body for pass topup\n\nmsg.ok = true; // flag for indicating if request is valid\n\nif (typeof msg.payload === 'object') {\n    if (msg.payload.hasOwnProperty('cardType')) {\n        if (typeof msg.payload.cardType === 'string')\n            msg.createTicketBody.cardType = msg.payload.cardType;\n        else msg.ok = false;\n        if (typeof msg.payload.cardID === 'string')\n            msg.createTicketBody.id = msg.payload.cardID;\n    }\n\n    if (msg.payload.hasOwnProperty('fareType')) {\n        if (typeof msg.payload.fareType === 'number')\n            msg.createTicketBody.fareType = msg.payload.fareType;\n        else msg.ok = false;\n    }\n\n    if (msg.ok && msg.payload.hasOwnProperty('location')) {\n        if (typeof msg.payload.location === 'number')\n            msg.topupBalanceBody = msg.topupPassBody = msg.payload.location;\n        else msg.ok = false;\n    }\n\n    if (msg.payload.hasOwnProperty('balance')) {\n        if (typeof msg.payload.balance === 'number' && msg.payload.balance > 0)\n            msg.topupBalanceBody.amount = msg.payload.balance;\n        else msg.ok = false;\n    }\n\n    if (msg.ok && msg.payload.hasOwnProperty('pass')) {\n        if (\n            typeof msg.payload.pass === 'object'\n            && msg.payload.pass.hasOwnProperty('product') && typeof msg.payload.pass.product === 'number'\n            && msg.payload.pass.hasOwnProperty('duration') && typeof msg.payload.pass.duration === 'number'\n        ) {\n            msg.topupPassBody.product = msg.payload.pass.product;\n            msg.topupPassBody.duration = msg.payload.pass.duration;\n        }\n        else msg.ok = false;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "688ce0fdd9b92eb7"
            ]
        ]
    },
    {
        "id": "688ce0fdd9b92eb7",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if request is valid",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "6224c0d425f98b6b"
            ],
            [
                "bb0bc38c0134d523"
            ]
        ]
    },
    {
        "id": "6224c0d425f98b6b",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 200,
        "wires": [
            [
                "2f13fc6bd84e3347"
            ]
        ]
    },
    {
        "id": "2f13fc6bd84e3347",
        "type": "http response",
        "z": "fab23692fcecca97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 300,
        "wires": []
    },
    {
        "id": "f2e194b8b5f11b34",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Create new ticket",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "888849462350abe7"
            ]
        ]
    },
    {
        "id": "888849462350abe7",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "2f13fc6bd84e3347"
            ],
            [
                "f3c89d6b8d8b5b15"
            ]
        ]
    },
    {
        "id": "1263cb6aa9a6363d",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if ticket is to be topped up",
        "property": "topupBalanceBody.amount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 380,
        "wires": [
            [
                "39822c160b997241"
            ],
            [
                "01ebbfe5250f782e"
            ]
        ]
    },
    {
        "id": "bb0bc38c0134d523",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "createTicketBody",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$env('DBAPI_HOST') & '/api/tickets'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 220,
        "wires": [
            [
                "f2e194b8b5f11b34"
            ]
        ]
    },
    {
        "id": "39822c160b997241",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "topupBalanceBody",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 360,
        "wires": [
            [
                "05339ecd320ca699"
            ]
        ]
    },
    {
        "id": "05339ecd320ca699",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Top up balance",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/api/tickets/{{{createResult.ticketID}}}/balance",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 400,
        "wires": [
            [
                "53be7ee43d108277"
            ]
        ]
    },
    {
        "id": "f3c89d6b8d8b5b15",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "createResult",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 320,
        "wires": [
            [
                "1263cb6aa9a6363d"
            ]
        ]
    },
    {
        "id": "53be7ee43d108277",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 300,
        "wires": [
            [
                "2f13fc6bd84e3347"
            ],
            [
                "d4668bcf852d724a"
            ]
        ]
    },
    {
        "id": "01ebbfe5250f782e",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if pass is to be added",
        "property": "topupPassBody.product",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 500,
        "wires": [
            [
                "acb17a887a1ebf4f"
            ],
            [
                "b0bf49267673424d"
            ]
        ]
    },
    {
        "id": "acb17a887a1ebf4f",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "topupPassBody",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 480,
        "wires": [
            [
                "a52f619efe09bbeb"
            ]
        ]
    },
    {
        "id": "a52f619efe09bbeb",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Top up pass",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/api/tickets/{{{createResult.ticketID}}}/pass",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 480,
        "wires": [
            [
                "561acb6944992ae3"
            ]
        ]
    },
    {
        "id": "561acb6944992ae3",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 480,
        "wires": [
            [
                "2f13fc6bd84e3347"
            ],
            [
                "50d0592fd96155e0"
            ]
        ]
    },
    {
        "id": "b0bf49267673424d",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set response",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: {\n        create: msg.createResult,\n        balance: msg.balanceResult || null,\n        pass: msg.passResult || null\n    },\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 580,
        "wires": [
            [
                "2f13fc6bd84e3347"
            ]
        ]
    },
    {
        "id": "d4668bcf852d724a",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "balanceResult",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 360,
        "wires": [
            [
                "01ebbfe5250f782e"
            ]
        ]
    },
    {
        "id": "50d0592fd96155e0",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "passResult",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "b0bf49267673424d"
            ]
        ]
    },
    {
        "id": "ab147b3a9135db3e",
        "type": "http in",
        "z": "fab23692fcecca97",
        "name": "",
        "url": "/api/tickets/:id/balance",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 660,
        "wires": [
            [
                "b0f656eb2dbe918d"
            ]
        ]
    },
    {
        "id": "101c8289ee80d712",
        "type": "comment",
        "z": "fab23692fcecca97",
        "name": "Top up balance",
        "info": "",
        "x": 200,
        "y": 700,
        "wires": []
    },
    {
        "id": "b0f656eb2dbe918d",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Extract options",
        "func": "msg.ok = true;\n\nif (\n    typeof msg.payload === 'object'\n    && msg.payload.hasOwnProperty('amount') && typeof msg.payload.amount === 'number' && msg.payload.amount > 0\n    && (!msg.payload.hasOwnProperty('location') || (typeof msg.payload.location === 'number' && msg.payload.location >= 0))\n) {\n    msg.ticketID = msg.req.params.id;\n    msg.amount = msg.payload.amount; // for later\n    msg.location = msg.payload.hasOwnProperty('location') ? msg.payload.location : 0;\n} else msg.ok = false;\n\nif (msg.ok)\n    msg.url = env.get('DBAPI_HOST') + '/api/tickets/' + msg.ticketID;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 660,
        "wires": [
            [
                "2777400f4db319cc"
            ]
        ]
    },
    {
        "id": "2777400f4db319cc",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if request is valid",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "9282e767a7d7608e"
            ],
            [
                "f515ff01b38979d8"
            ]
        ]
    },
    {
        "id": "9282e767a7d7608e",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 660,
        "wires": [
            [
                "b828f3b3848a4fa6"
            ]
        ]
    },
    {
        "id": "b828f3b3848a4fa6",
        "type": "http response",
        "z": "fab23692fcecca97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 840,
        "wires": []
    },
    {
        "id": "f515ff01b38979d8",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Get ticket details",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 720,
        "wires": [
            [
                "0e30f168f146eb7e"
            ]
        ]
    },
    {
        "id": "0e30f168f146eb7e",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 720,
        "wires": [
            [
                "b828f3b3848a4fa6"
            ],
            [
                "070cddd13c65173a"
            ]
        ]
    },
    {
        "id": "070cddd13c65173a",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set payload",
        "func": "msg.payload = {\n    balance: msg.payload.message.balance + msg.amount\n};\nmsg.method = 'PATCH';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 780,
        "wires": [
            [
                "899d4b05e557ee43"
            ]
        ]
    },
    {
        "id": "899d4b05e557ee43",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Modify balance",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 780,
        "wires": [
            [
                "f1fab62f27e9cf8a"
            ]
        ]
    },
    {
        "id": "f1fab62f27e9cf8a",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 780,
        "wires": [
            [
                "b828f3b3848a4fa6"
            ],
            [
                "99f8925283748043"
            ]
        ]
    },
    {
        "id": "99f8925283748043",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set payload",
        "func": "msg.payload = {\n    type: 4, // top up\n    location: msg.location,\n    balance: msg.payload.message.balance // use result from last request\n};\nmsg.url = env.get('DBAPI_HOST') + '/api/tickets/' + msg.ticketID + '/transactions';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 840,
        "wires": [
            [
                "ebb3be628f783609"
            ]
        ]
    },
    {
        "id": "ebb3be628f783609",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Write transaction",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "b828f3b3848a4fa6"
            ]
        ]
    },
    {
        "id": "9cac5501551d86ae",
        "type": "http in",
        "z": "fab23692fcecca97",
        "name": "",
        "url": "/api/tickets/:id/pass",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 230,
        "y": 940,
        "wires": [
            [
                "64ed878e3bb5c3f6"
            ]
        ]
    },
    {
        "id": "aefe6fd868f5a9e3",
        "type": "comment",
        "z": "fab23692fcecca97",
        "name": "Top up pass",
        "info": "",
        "x": 190,
        "y": 980,
        "wires": []
    },
    {
        "id": "64ed878e3bb5c3f6",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Extract options",
        "func": "msg.ok = true;\n\nif (\n    typeof msg.payload === 'object'\n    && msg.payload.hasOwnProperty('product') && typeof msg.payload.product === 'number' && msg.payload.product > 0\n    && msg.payload.hasOwnProperty('duration') && typeof msg.payload.duration === 'number' && msg.payload.duration > 0\n    && (!msg.payload.hasOwnProperty('location') || (typeof msg.payload.location === 'number' && msg.payload.location >= 0))\n) {\n    msg.ticketID = msg.req.params.id;\n    msg.product = msg.payload.product; // for later\n    msg.duration = msg.payload.duration;\n    msg.location = msg.payload.hasOwnProperty('location') ? msg.payload.location : 0;\n} else msg.ok = false;\n\nif (msg.ok)\n    msg.url = env.get('DBAPI_HOST') + `/api/tickets/${msg.ticketID}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 940,
        "wires": [
            [
                "63c606fd80bc9494"
            ]
        ]
    },
    {
        "id": "63c606fd80bc9494",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if request is valid",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 940,
        "wires": [
            [
                "f26494046b0c258a"
            ],
            [
                "f34a6a0daa357cf9"
            ]
        ]
    },
    {
        "id": "f26494046b0c258a",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 940,
        "wires": [
            [
                "4dcd8dc21cfd6e60"
            ]
        ]
    },
    {
        "id": "4dcd8dc21cfd6e60",
        "type": "http response",
        "z": "fab23692fcecca97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 940,
        "wires": []
    },
    {
        "id": "413de2390ced90ba",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Get current passes",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1060,
        "wires": [
            [
                "49659462f1ebed4d"
            ]
        ]
    },
    {
        "id": "49659462f1ebed4d",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1060,
        "wires": [
            [
                "4dcd8dc21cfd6e60"
            ],
            [
                "034a41a3072c4652"
            ]
        ]
    },
    {
        "id": "034a41a3072c4652",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Get number of passes",
        "func": "msg.payload = msg.payload.message.length;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1080,
        "wires": [
            [
                "de31013463946b2b"
            ]
        ]
    },
    {
        "id": "de31013463946b2b",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if there are 2 passes",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 1060,
        "wires": [
            [
                "3d9a4d89a675cca6"
            ],
            [
                "fddeb2bf7fabd114"
            ]
        ]
    },
    {
        "id": "3d9a4d89a675cca6",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 403",
        "func": "msg.statusCode = 403;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Cannot store more than two passes',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1000,
        "wires": [
            [
                "4dcd8dc21cfd6e60"
            ]
        ]
    },
    {
        "id": "fddeb2bf7fabd114",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set payload",
        "func": "msg.payload = {\n    type: 5, // purchase pass\n    location: msg.location,\n    balance: msg.balance,\n    pass: {\n        duration: msg.duration,\n        product: msg.product\n    }\n};\nmsg.url = env.get('DBAPI_HOST') + '/api/tickets/' + msg.ticketID + '/transactions';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "d084819fcf8b97c7"
            ]
        ]
    },
    {
        "id": "f34a6a0daa357cf9",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Get ticket details",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "25cd18f66a8e6dd9"
            ]
        ]
    },
    {
        "id": "25cd18f66a8e6dd9",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "4dcd8dc21cfd6e60"
            ],
            [
                "4ebb49d0cafa0441"
            ]
        ]
    },
    {
        "id": "4ebb49d0cafa0441",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "balance",
                "pt": "msg",
                "to": "payload.message.balance",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$env('DBAPI_HOST') & '/api/tickets/' & ticketID & '/passes'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 1060,
        "wires": [
            [
                "413de2390ced90ba"
            ]
        ]
    },
    {
        "id": "d084819fcf8b97c7",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Write transaction",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 1140,
        "wires": [
            [
                "4dcd8dc21cfd6e60"
            ]
        ]
    },
    {
        "id": "94e06525c3bf6428",
        "type": "catch",
        "z": "fab23692fcecca97",
        "name": "Catch request errors",
        "scope": [
            "f2e194b8b5f11b34",
            "05339ecd320ca699",
            "a52f619efe09bbeb"
        ],
        "uncaught": false,
        "x": 630,
        "y": 120,
        "wires": [
            [
                "2e41d405475ead88"
            ]
        ]
    },
    {
        "id": "2e41d405475ead88",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Internal server error: ' + msg.error.message,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "2f13fc6bd84e3347"
            ]
        ]
    },
    {
        "id": "fd91695341aa8e66",
        "type": "catch",
        "z": "fab23692fcecca97",
        "name": "Catch request errors",
        "scope": [
            "f515ff01b38979d8",
            "899d4b05e557ee43",
            "ebb3be628f783609"
        ],
        "uncaught": false,
        "x": 670,
        "y": 880,
        "wires": [
            [
                "b1a06881a536ae78"
            ]
        ]
    },
    {
        "id": "b1a06881a536ae78",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Internal server error: ' + msg.error.message,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 880,
        "wires": [
            [
                "b828f3b3848a4fa6"
            ]
        ]
    },
    {
        "id": "a66b05110a42fc2f",
        "type": "catch",
        "z": "fab23692fcecca97",
        "name": "Catch request errors",
        "scope": [
            "f34a6a0daa357cf9",
            "413de2390ced90ba",
            "d084819fcf8b97c7"
        ],
        "uncaught": false,
        "x": 950,
        "y": 1180,
        "wires": [
            [
                "def14deaabdcdbcd"
            ]
        ]
    },
    {
        "id": "def14deaabdcdbcd",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Internal server error: ' + msg.error.message,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1180,
        "wires": [
            [
                "4dcd8dc21cfd6e60"
            ]
        ]
    },
    {
        "id": "0c3814bdab5cb53d",
        "type": "http in",
        "z": "fab23692fcecca97",
        "name": "",
        "url": "/api/cards/:type/:id/balance",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1510,
        "y": 380,
        "wires": [
            [
                "0a072729e2e69927"
            ]
        ]
    },
    {
        "id": "ebf68d5337fd4df8",
        "type": "comment",
        "z": "fab23692fcecca97",
        "name": "Top up balance",
        "info": "",
        "x": 1480,
        "y": 420,
        "wires": []
    },
    {
        "id": "0a072729e2e69927",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Extract options",
        "func": "msg.ok = true;\n\nif (\n    typeof msg.payload === 'object'\n    && msg.payload.hasOwnProperty('amount') && typeof msg.payload.amount === 'number' && msg.payload.amount > 0\n    && (!msg.payload.hasOwnProperty('location') || (typeof msg.payload.location === 'number' && msg.payload.location >= 0))\n) {\n    msg.cardType = msg.req.params.type;\n    msg.cardID = msg.req.params.id;\n    msg.amount = msg.payload.amount; // for later\n    msg.location = msg.payload.hasOwnProperty('location') ? msg.payload.location : 0;\n} else msg.ok = false;\n\nif (msg.ok)\n    msg.url = env.get('DBAPI_HOST') + '/api/cards/' + msg.cardType + '/' + msg.cardID;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 380,
        "wires": [
            [
                "96b91be0255e09c3"
            ]
        ]
    },
    {
        "id": "96b91be0255e09c3",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if request is valid",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 380,
        "wires": [
            [
                "cdadab684b1814c7"
            ],
            [
                "f1eac115416e50c9"
            ]
        ]
    },
    {
        "id": "cdadab684b1814c7",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 380,
        "wires": [
            [
                "974ffa263d1a668a"
            ]
        ]
    },
    {
        "id": "974ffa263d1a668a",
        "type": "http response",
        "z": "fab23692fcecca97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "f1eac115416e50c9",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Get ticket details",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1690,
        "y": 440,
        "wires": [
            [
                "6a4263861024cf24"
            ]
        ]
    },
    {
        "id": "6a4263861024cf24",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1910,
        "y": 440,
        "wires": [
            [
                "974ffa263d1a668a"
            ],
            [
                "51e79198e859cfb9"
            ]
        ]
    },
    {
        "id": "51e79198e859cfb9",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set payload",
        "func": "msg.ticketID = msg.payload.message.ticketID;\nmsg.payload = {\n    balance: msg.payload.message.balance + msg.amount\n};\nmsg.method = 'PATCH';\nmsg.url = env.get('DBAPI_HOST') + '/api/tickets/' + msg.ticketID;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 500,
        "wires": [
            [
                "f10ad21e215dc222"
            ]
        ]
    },
    {
        "id": "f10ad21e215dc222",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Modify balance",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1700,
        "y": 500,
        "wires": [
            [
                "d4a1e4d6d281c00b"
            ]
        ]
    },
    {
        "id": "d4a1e4d6d281c00b",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1910,
        "y": 500,
        "wires": [
            [
                "974ffa263d1a668a"
            ],
            [
                "c6d62920a37f2b01"
            ]
        ]
    },
    {
        "id": "c6d62920a37f2b01",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set payload",
        "func": "msg.payload = {\n    type: 4, // top up\n    location: msg.location,\n    balance: msg.payload.message.balance // use result from last request\n};\nmsg.url = env.get('DBAPI_HOST') + '/api/tickets/' + msg.ticketID + '/transactions';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "406c6722f6d76941"
            ]
        ]
    },
    {
        "id": "406c6722f6d76941",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Write transaction",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1710,
        "y": 560,
        "wires": [
            [
                "7fc94990cc73db3e"
            ]
        ]
    },
    {
        "id": "204ba51cbede879f",
        "type": "http in",
        "z": "fab23692fcecca97",
        "name": "",
        "url": "/api/cards/:type/:id/pass",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 1500,
        "y": 660,
        "wires": [
            [
                "f6c077b6bef9ceca"
            ]
        ]
    },
    {
        "id": "d87f2e17ceb5a932",
        "type": "comment",
        "z": "fab23692fcecca97",
        "name": "Top up pass",
        "info": "",
        "x": 1470,
        "y": 700,
        "wires": []
    },
    {
        "id": "f6c077b6bef9ceca",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Extract options",
        "func": "msg.ok = true;\n\nif (\n    typeof msg.payload === 'object'\n    && msg.payload.hasOwnProperty('product') && typeof msg.payload.product === 'number' && msg.payload.product > 0\n    && msg.payload.hasOwnProperty('duration') && typeof msg.payload.duration === 'number' && msg.payload.duration > 0\n    && (!msg.payload.hasOwnProperty('location') || (typeof msg.payload.location === 'number' && msg.payload.location >= 0))\n) {\n    msg.cardType = msg.req.params.type;\n    msg.cardID = msg.req.params.id;\n    msg.product = msg.payload.product; // for later\n    msg.duration = msg.payload.duration;\n    msg.location = msg.payload.hasOwnProperty('location') ? msg.payload.location : 0;\n} else msg.ok = false;\n\nif (msg.ok)\n    msg.url = env.get('DBAPI_HOST') + '/api/cards/' + msg.cardType + '/' + msg.cardID;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 660,
        "wires": [
            [
                "d3367e2e9b5e8635"
            ]
        ]
    },
    {
        "id": "d3367e2e9b5e8635",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if request is valid",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 660,
        "wires": [
            [
                "f799c0e4be3c7811"
            ],
            [
                "e5ad9184c86b151f"
            ]
        ]
    },
    {
        "id": "f799c0e4be3c7811",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 660,
        "wires": [
            [
                "b4629c449401ab81"
            ]
        ]
    },
    {
        "id": "b4629c449401ab81",
        "type": "http response",
        "z": "fab23692fcecca97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2630,
        "y": 660,
        "wires": []
    },
    {
        "id": "943d6be71890e60f",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Get current passes",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1670,
        "y": 820,
        "wires": [
            [
                "c3bd85f6ba9f54ad"
            ]
        ]
    },
    {
        "id": "c3bd85f6ba9f54ad",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 780,
        "wires": [
            [
                "b4629c449401ab81"
            ],
            [
                "d9abac7f0f5e4f80"
            ]
        ]
    },
    {
        "id": "d9abac7f0f5e4f80",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Get number of passes",
        "func": "msg.payload = msg.payload.message.length;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 800,
        "wires": [
            [
                "3ce6150484ab07bf"
            ]
        ]
    },
    {
        "id": "3ce6150484ab07bf",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if there are 2 passes",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2340,
        "y": 780,
        "wires": [
            [
                "995ecec00d1f5f05"
            ],
            [
                "1d27e45d0860aa48"
            ]
        ]
    },
    {
        "id": "995ecec00d1f5f05",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 403",
        "func": "msg.statusCode = 403;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Cannot store more than two passes',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 720,
        "wires": [
            [
                "b4629c449401ab81"
            ]
        ]
    },
    {
        "id": "1d27e45d0860aa48",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set payload",
        "func": "msg.payload = {\n    type: 5, // purchase pass\n    location: msg.location,\n    balance: msg.balance,\n    pass: {\n        duration: msg.duration,\n        product: msg.product\n    }\n};\nmsg.url = env.get('DBAPI_HOST') + '/api/tickets/' + msg.ticketID + '/transactions';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 860,
        "wires": [
            [
                "3f1292fab220d46e"
            ]
        ]
    },
    {
        "id": "e5ad9184c86b151f",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Get ticket details",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1690,
        "y": 720,
        "wires": [
            [
                "ee381c030daed03d"
            ]
        ]
    },
    {
        "id": "ee381c030daed03d",
        "type": "switch",
        "z": "fab23692fcecca97",
        "name": "Check if successful",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 720,
        "wires": [
            [
                "b4629c449401ab81"
            ],
            [
                "26f26e65527921f9"
            ]
        ]
    },
    {
        "id": "26f26e65527921f9",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "Get balance and ticket ID and set pass fetch URL",
        "rules": [
            {
                "t": "set",
                "p": "balance",
                "pt": "msg",
                "to": "payload.message.balance",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "ticketID",
                "pt": "msg",
                "to": "payload.message.ticketID",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$env('DBAPI_HOST') & '/api/tickets/' & ticketID & '/passes'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 780,
        "wires": [
            [
                "943d6be71890e60f"
            ]
        ]
    },
    {
        "id": "3f1292fab220d46e",
        "type": "http request",
        "z": "fab23692fcecca97",
        "name": "Write transaction",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2070,
        "y": 860,
        "wires": [
            [
                "ced9d0b197843383"
            ]
        ]
    },
    {
        "id": "66b7b70d65b74560",
        "type": "catch",
        "z": "fab23692fcecca97",
        "name": "Catch request errors",
        "scope": [
            "f1eac115416e50c9",
            "f10ad21e215dc222",
            "406c6722f6d76941"
        ],
        "uncaught": false,
        "x": 1950,
        "y": 600,
        "wires": [
            [
                "ba0225ec98578f8b"
            ]
        ]
    },
    {
        "id": "ba0225ec98578f8b",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Internal server error: ' + msg.error.message,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 600,
        "wires": [
            [
                "974ffa263d1a668a"
            ]
        ]
    },
    {
        "id": "1f9009c5f57e2681",
        "type": "catch",
        "z": "fab23692fcecca97",
        "name": "Catch request errors",
        "scope": [
            "e5ad9184c86b151f",
            "943d6be71890e60f",
            "3f1292fab220d46e"
        ],
        "uncaught": false,
        "x": 2230,
        "y": 900,
        "wires": [
            [
                "460b242a75fd75ab"
            ]
        ]
    },
    {
        "id": "460b242a75fd75ab",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Internal server error: ' + msg.error.message,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 900,
        "wires": [
            [
                "b4629c449401ab81"
            ]
        ]
    },
    {
        "id": "7fc94990cc73db3e",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.message.ticketID",
                "pt": "msg",
                "to": "ticketID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1980,
        "y": 560,
        "wires": [
            [
                "974ffa263d1a668a"
            ]
        ]
    },
    {
        "id": "ced9d0b197843383",
        "type": "change",
        "z": "fab23692fcecca97",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.message.ticketID",
                "pt": "msg",
                "to": "ticketID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2320,
        "y": 860,
        "wires": [
            [
                "b4629c449401ab81"
            ]
        ]
    },
    {
        "id": "3d027c4ed2f27897",
        "type": "http in",
        "z": "fab23692fcecca97",
        "name": "",
        "url": "/api/healthcheck",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "1a5744008db16476"
            ]
        ]
    },
    {
        "id": "1a5744008db16476",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Return health check response",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Ticket vending API is operational',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "d90bba12944ed8f9"
            ]
        ]
    },
    {
        "id": "d90bba12944ed8f9",
        "type": "http response",
        "z": "fab23692fcecca97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 40,
        "wires": []
    },
    {
        "id": "6f535b50cd98bd73",
        "type": "inject",
        "z": "fab23692fcecca97",
        "name": "Initialisation",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1280,
        "wires": [
            [
                "2310a17dd89df8be"
            ]
        ]
    },
    {
        "id": "2310a17dd89df8be",
        "type": "function",
        "z": "fab23692fcecca97",
        "name": "Set timezone",
        "func": "process.env.TZ = 'Australia/Melbourne';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1280,
        "wires": [
            []
        ]
    }
]