[
    {
        "id": "216f0e6810bad0c9",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c8ab439c6aeb96e1",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "172.17.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "ptticket",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "dynamic",
        "userFieldType": "str",
        "password": "ptticket_dynamic",
        "passwordFieldType": "str"
    },
    {
        "id": "265d23c3673d17a1",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/healthcheck",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1080,
        "wires": [
            [
                "05dd21f465e40a3f"
            ]
        ]
    },
    {
        "id": "7aece52a10c1a443",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 790,
        "y": 1080,
        "wires": []
    },
    {
        "id": "05dd21f465e40a3f",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate health check response",
        "func": "msg.statusCode = (Date.now() >= (flow.get('staticExpiry') || new Date(0))) ? 503 : 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: (msg.statusCode == 503)\n        ? 'Static database cache is expired'\n        : 'Database API is functional',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1080,
        "wires": [
            [
                "7aece52a10c1a443"
            ]
        ]
    },
    {
        "id": "8dc608d7e34eaf52",
        "type": "inject",
        "z": "216f0e6810bad0c9",
        "name": "Fetch static DB",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "object",
        "payloadType": "date",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "285db8d436534587"
            ]
        ]
    },
    {
        "id": "865d6c26df4c837c",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get conditions that apply for today",
        "query": "SELECT bit_or(\"dateCondition\") AS \"cond\" FROM \"static\".\"SpecialDates\" WHERE \"from\" >= $date AND \"to\" <= $date;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 680,
        "wires": [
            [
                "9e14ff47e8a325e6"
            ]
        ]
    },
    {
        "id": "0f7012e50c5181f0",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Get current date",
        "func": "let dateObj = new Date();\nmsg.queryParameters = {};\nmsg.queryParameters.date = `${dateObj.getFullYear()}-${dateObj.getMonth()}-${dateObj.getDate()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 620,
        "wires": [
            [
                "865d6c26df4c837c"
            ]
        ]
    },
    {
        "id": "9e14ff47e8a325e6",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Save condition to context",
        "func": "let cond = msg.payload[0].cond || 0;\nlet dayOfWeek = (new Date()).getDay();\nif(dayOfWeek == 0 || dayOfWeek == 6) cond |= 1; // set weekend bit\nflow.set('dateCondition', cond);\nmsg.queryParameters = { cond: cond };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 740,
        "wires": [
            [
                "0044e78972a9a1de",
                "519efc4e9572f5b0"
            ]
        ]
    },
    {
        "id": "0044e78972a9a1de",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get fare types and fare cap for today",
        "query": "SELECT\n\tfc.\"type\",\n\tft.\"name\" AS \"name\",\n\tfc.\"cap\"\nFROM (\n\tSELECT\n\t\tdfc.\"fareType\" AS \"type\",\n\t\tMIN(dfc.\"fareCap\") AS \"cap\"\n\tFROM\n\t\t\"static\".\"DailyFareCaps\" dfc\n\tWHERE\n\t\tdfc.\"dateCondition\" = 0\n\t\tOR $cond & dfc.\"dateCondition\" != 0\n\tGROUP BY\n\t\t\"type\"\n) fc\nJOIN\n\t\"static\".\"FareTypes\" ft\nON\n\tfc.\"type\" = ft.\"type\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 850,
        "y": 740,
        "wires": [
            [
                "031a3cb30fe63211"
            ]
        ]
    },
    {
        "id": "519efc4e9572f5b0",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get product fares for today",
        "query": "SELECT \n\t\"productID\",\n\t\"fareType\",\n\tMIN(\"fare\") AS \"fare\"\nFROM\n\t\"static\".\"ProductFares\"\nWHERE\n\t\"dateCondition\" = 0\n\tOR $cond & \"dateCondition\" != 0\nGROUP BY\n\t\"productID\", \"fareType\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 800,
        "wires": [
            [
                "0990c81a85cd00c8"
            ]
        ]
    },
    {
        "id": "031a3cb30fe63211",
        "type": "change",
        "z": "216f0e6810bad0c9",
        "name": "Tag fare types/caps message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fareTypes",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 740,
        "wires": [
            [
                "e0675b7935c7680c"
            ]
        ]
    },
    {
        "id": "0990c81a85cd00c8",
        "type": "change",
        "z": "216f0e6810bad0c9",
        "name": "Tag product fares message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "prodFares",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 800,
        "wires": [
            [
                "e0675b7935c7680c"
            ]
        ]
    },
    {
        "id": "e0675b7935c7680c",
        "type": "join",
        "z": "216f0e6810bad0c9",
        "name": "Join SQL results",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1430,
        "y": 740,
        "wires": [
            [
                "9ca237858ad323d9"
            ]
        ]
    },
    {
        "id": "9ca237858ad323d9",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Save fare types and product fares to context",
        "func": "let fareTypes = Array(msg.payload.fareTypes.length).fill(null);\n\nmsg.payload.fareTypes.forEach((entry) => {\n    fareTypes[entry.type] = {\n        name: entry.name,\n        cap: entry.cap,\n        productFares: Array(msg.payload.products.length).fill(0)\n    };\n});\n\nmsg.payload.prodFares.forEach((entry) => {\n    fareTypes[entry.fareType].productFares[entry.productID] = entry.fare;\n});\n\nmsg.payload = fareTypes;\nflow.set('fareTypes', msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 800,
        "wires": [
            [
                "a030b80886673d51"
            ]
        ]
    },
    {
        "id": "76712dbf4477aaac",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get products",
        "query": "SELECT * FROM \"static\".\"Products\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 880,
        "wires": [
            [
                "3113a1f977da6f5b"
            ]
        ]
    },
    {
        "id": "3113a1f977da6f5b",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Save products to context",
        "func": "let products = Array(msg.payload.length).fill(null);\nmsg.payload.forEach((entry) => {\n    products[entry.id] = {\n        name: entry.name,\n        fromZone: entry.fromZone,\n        toZone: entry.toZone,\n        duration: entry.duration\n    };\n});\n\nmsg.payload = products;\nmsg.topic = 'products';\nflow.set(msg.topic, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 880,
        "wires": [
            [
                "e0675b7935c7680c"
            ]
        ]
    },
    {
        "id": "ececa4cfd21d6f3d",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set static data expiry timestamp",
        "func": "let dateObj = new Date();\nif(dateObj.getHours() > 3) dateObj.setDate(dateObj.getDate() + 1); // next day\ndateObj.setHours(3, 0, 0, 0); // 3am\n\nmsg.payload = dateObj;\nflow.set('staticExpiry', msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "a030b80886673d51",
        "type": "join",
        "z": "216f0e6810bad0c9",
        "name": "Wait for update completion",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1880,
        "y": 800,
        "wires": [
            [
                "ececa4cfd21d6f3d"
            ]
        ]
    },
    {
        "id": "06cf2482fbbd5846",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate products list response",
        "func": "let payload = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('products') || null);\nif (payload !== null) {\n    if (msg.payload.hasOwnProperty('hideZones') && msg.payload.hideZones.toLowerCase() === 'true') {\n        let products = payload; payload = [];\n        products.forEach((entry) => payload.push(entry.name)); // names only\n    }\n    if (msg.payload.hasOwnProperty('dict') && msg.payload.dict.toLowerCase() === 'true') {\n        payload = Object.assign({}, payload); // convert to object\n    }\n}\n\nmsg.statusCode = (payload === null) ? 503 : 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: (msg.statusCode == 503)\n        ? 'Static database cache is expired'\n        : payload,\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "2126f90df7da0990"
            ]
        ]
    },
    {
        "id": "0664e07e9d978adb",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/products",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1140,
        "wires": [
            [
                "06cf2482fbbd5846"
            ]
        ]
    },
    {
        "id": "2126f90df7da0990",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1b1e16f55ef0d687",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate fare types list response",
        "func": "let payload = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('fareTypes') || null);\nif (payload !== null) {\n    if (msg.payload.hasOwnProperty('hideFares') && msg.payload.hideFares.toLowerCase() === 'true') {\n        let types = payload; payload = [];\n        types.forEach((entry) => payload.push(entry.name)); // names only\n    }\n    if (msg.payload.hasOwnProperty('dict') && msg.payload.dict.toLowerCase() === 'true') {\n        payload = Object.assign({}, payload); // convert to object\n    }\n}\n\nmsg.statusCode = (payload === null) ? 503 : 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: (msg.statusCode == 503)\n        ? 'Static database cache is expired'\n        : payload,\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1320,
        "wires": [
            [
                "2b50c7ff92d174cd"
            ]
        ]
    },
    {
        "id": "4a6f910350553c7d",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/fareTypes",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1320,
        "wires": [
            [
                "1b1e16f55ef0d687"
            ]
        ]
    },
    {
        "id": "2b50c7ff92d174cd",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1320,
        "wires": []
    },
    {
        "id": "6ab73dd7f1fa5906",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Static data query",
        "info": "",
        "x": 940,
        "y": 1140,
        "wires": []
    },
    {
        "id": "04992652fc426024",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get transaction types",
        "query": "SELECT * FROM \"static\".\"TransactionTypes\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 960,
        "wires": [
            [
                "7bc06a341bd190be"
            ]
        ]
    },
    {
        "id": "7bc06a341bd190be",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Save transaction types to context",
        "func": "let types = Array(msg.payload.length).fill(null);\nmsg.payload.forEach((entry) => types[entry.type] = entry.name);\n\nmsg.payload = types;\nflow.set('transactionTypes', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 960,
        "wires": [
            [
                "a030b80886673d51"
            ]
        ]
    },
    {
        "id": "6170ba65634e5270",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate transaction types list response",
        "func": "let payload = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('transactionTypes') || null);\nif (payload !== null) {\n    if (msg.payload.hasOwnProperty('dict') && msg.payload.dict.toLowerCase() === 'true') {\n        payload = Object.assign({}, payload); // convert to object\n    }\n}\n\nmsg.statusCode = (payload === null) ? 503 : 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: (msg.statusCode == 503)\n        ? 'Static database cache is expired'\n        : payload,\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1440,
        "wires": [
            [
                "14ad27052606b956"
            ]
        ]
    },
    {
        "id": "cbd7725f758ade76",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/transactionTypes",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 1440,
        "wires": [
            [
                "6170ba65634e5270"
            ]
        ]
    },
    {
        "id": "14ad27052606b956",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1440,
        "wires": []
    },
    {
        "id": "73077bc1906149aa",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 1740,
        "wires": [
            [
                "7b0ebad88019613a"
            ]
        ]
    },
    {
        "id": "7b0ebad88019613a",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if request body is valid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 1740,
        "wires": [
            [
                "d52f5afb57915d25"
            ],
            [
                "5e11d8f11f995e44"
            ]
        ]
    },
    {
        "id": "5e11d8f11f995e44",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body or SQL operation error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1900,
        "wires": [
            [
                "5719f874cb02ba68"
            ]
        ]
    },
    {
        "id": "5719f874cb02ba68",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "d52f5afb57915d25",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set up query parameters",
        "func": "msg.queryParameters = msg.payload;\nif (!msg.queryParameters.hasOwnProperty('cardType'))\n    msg.queryParameters.cardType = 'qr'; // defaults to QR codes (since their physical ticket IDs are randomly generated)\nif (!msg.queryParameters.hasOwnProperty('fareType'))\n    msg.queryParameters.fareType = 0; // defaults to full fare\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1740,
        "wires": [
            [
                "c4970c38d00656c5"
            ]
        ]
    },
    {
        "id": "c4970c38d00656c5",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if ID is given",
        "property": "queryParameters",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "id",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 1780,
        "wires": [
            [
                "adb7fd41214475bd"
            ],
            [
                "e2b28c5635146e38"
            ]
        ]
    },
    {
        "id": "e2b28c5635146e38",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Create ticket entry (ID not given)",
        "query": "WITH ticket AS (\n\tINSERT\n\t\tINTO \"dynamic\".\"Tickets\"\n\t\t\t(\"fareType\")\n\t\tVALUES\n\t\t\t($fareType)\n\t\tRETURNING \"id\"\n) INSERT\n\tINTO \"dynamic\".\"PhysicalTickets\"\n\t\t(\"type\", \"ticketID\")\n\tSELECT\n\t\t$cardType, \"id\"\n\t\tFROM ticket\n\tRETURNING \"id\", \"ticketID\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1030,
        "y": 1800,
        "wires": [
            [
                "7ca27fb83eda0ae6"
            ]
        ]
    },
    {
        "id": "adb7fd41214475bd",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Create ticket entry (ID given)",
        "query": "WITH ticket AS (\n\tINSERT\n\t\tINTO \"dynamic\".\"Tickets\"\n\t\t\t(\"id\", \"fareType\")\n\t\tVALUES\n\t\t\t($id, $fareType)\n\t\tRETURNING \"id\"\n) INSERT\n\tINTO \"dynamic\".\"PhysicalTickets\"\n\t\t(\"type\", \"ticketID\")\n\tSELECT\n\t\t$cardType, \"id\"\n\t\tFROM ticket\n\tRETURNING \"id\", \"ticketID\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 1760,
        "wires": [
            [
                "7ca27fb83eda0ae6"
            ]
        ]
    },
    {
        "id": "58f6d6e61d022aad",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch ticket entry creation error",
        "scope": [
            "adb7fd41214475bd",
            "e2b28c5635146e38"
        ],
        "uncaught": false,
        "x": 470,
        "y": 1900,
        "wires": [
            [
                "5e11d8f11f995e44"
            ]
        ]
    },
    {
        "id": "7ca27fb83eda0ae6",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if (msg.payload.length != 1) {\n    msg.statusCode = 500;\n    msg.payload = {\n        status: msg.statusCode,\n        message: 'Unexpected SQL query output',\n        time: Date.now()\n    };\n} else {\n    let queryResp = msg.payload[0];\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: {\n            ticketID: queryResp.ticketID,\n            fareType: msg.queryParameters.fareType,\n            cardID: queryResp.id,\n            cardType: msg.queryParameters.cardType\n        },\n        time: Date.now()\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1860,
        "wires": [
            [
                "5719f874cb02ba68"
            ]
        ]
    },
    {
        "id": "dc06f9b44e3a917a",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/cards/:type/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1540,
        "y": 1620,
        "wires": [
            [
                "7317e9a8b396bde4"
            ]
        ]
    },
    {
        "id": "7317e9a8b396bde4",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    type: msg.req.params.type,\n    id: msg.req.params.id\n};\nmsg.idOnly = (msg.payload.hasOwnProperty('idOnly') && msg.payload.idOnly.toLowerCase() === 'true');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1620,
        "wires": [
            [
                "186a17307b530a37"
            ]
        ]
    },
    {
        "id": "e84002f37c8f8737",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get ticket information",
        "query": "SELECT\n\tti.\"id\" AS \"ticketID\",\n\tpti.\"expiryDate\",\n\tpti.\"disabled\",\n\tti.\"fareType\",\n\tti.\"balance\",\n\tti.\"dailyExpenditure\",\n\tti.\"touchedOn\",\n\tti.\"currentProduct\",\n\tti.\"prodValidated\",\n\tti.\"prodDuration\"\nFROM\n\t\"dynamic\".\"PhysicalTickets\" pti\nJOIN\n\t\"dynamic\".\"Tickets\" ti\nON\n\tpti.\"ticketID\" = ti.\"id\"\nWHERE\n\tpti.\"id\" = $id\n\tAND pti.\"type\" = $type;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2080,
        "y": 1620,
        "wires": [
            [
                "6a0831b6495b7f3d"
            ]
        ]
    },
    {
        "id": "6a0831b6495b7f3d",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Ticket card ${msg.queryParameters.type}/${msg.queryParameters.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1580,
        "wires": [
            [
                "a9da3c9395df356a"
            ]
        ]
    },
    {
        "id": "a9da3c9395df356a",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2470,
        "y": 1580,
        "wires": []
    },
    {
        "id": "99f8de5a2c20b8c7",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/cards/:type/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1550,
        "y": 1720,
        "wires": [
            [
                "e99e142edadd278f"
            ]
        ]
    },
    {
        "id": "e99e142edadd278f",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    type: msg.req.params.type,\n    id: msg.req.params.id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1720,
        "wires": [
            [
                "b57105718d3f8a7b"
            ]
        ]
    },
    {
        "id": "b57105718d3f8a7b",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Disable card",
        "query": "UPDATE\n\t\"dynamic\".\"PhysicalTickets\"\nSET\n\t\"disabled\" = true\nWHERE\n\t\"id\" = $id\n\tAND \"type\" = $type;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1970,
        "y": 1720,
        "wires": [
            [
                "737609c08094e5cb"
            ]
        ]
    },
    {
        "id": "737609c08094e5cb",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.pgsql.rowCount == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Ticket card ${msg.queryParameters.type}/${msg.queryParameters.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Ticket card ${msg.queryParameters.type}/${msg.queryParameters.id} disabled`\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1720,
        "wires": [
            [
                "380dc7f55b783b4b"
            ]
        ]
    },
    {
        "id": "380dc7f55b783b4b",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2330,
        "y": 1720,
        "wires": []
    },
    {
        "id": "186a17307b530a37",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if only the ID is requested",
        "property": "idOnly",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1810,
        "y": 1580,
        "wires": [
            [
                "5bcf7b2148a063a3"
            ],
            [
                "e84002f37c8f8737"
            ]
        ]
    },
    {
        "id": "5bcf7b2148a063a3",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get ticket ID",
        "query": "SELECT\n\tpti.\"ticketID\" AS \"ticketID\"\nFROM\n\t\"dynamic\".\"PhysicalTickets\" pti\nWHERE\n\tpti.\"id\" = $id\n\tAND pti.\"type\" = $type;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2050,
        "y": 1560,
        "wires": [
            [
                "6a0831b6495b7f3d"
            ]
        ]
    },
    {
        "id": "60459ba706522910",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 2020,
        "wires": [
            [
                "0c5c93ae94aff45b"
            ]
        ]
    },
    {
        "id": "0c5c93ae94aff45b",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    id: msg.req.params.id\n};\nmsg.card = msg.payload.hasOwnProperty('card') && msg.payload.card.toLowerCase() === 'true';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2020,
        "wires": [
            [
                "c134161ca2e9e058"
            ]
        ]
    },
    {
        "id": "c134161ca2e9e058",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if the associated card's information is also to be fetched",
        "property": "card",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 2060,
        "wires": [
            [
                "38769624112c2a4b"
            ],
            [
                "40b1c0ccf420fd49"
            ]
        ]
    },
    {
        "id": "40b1c0ccf420fd49",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get ticket information",
        "query": "SELECT\n\tti.\"fareType\",\n\tti.\"balance\",\n\tti.\"dailyExpenditure\",\n\tti.\"touchedOn\",\n\tti.\"currentProduct\",\n\tti.\"prodValidated\",\n\tti.\"prodDuration\"\nFROM\n\t\"dynamic\".\"Tickets\" ti\nWHERE\n\tti.\"id\" = $id;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 2080,
        "wires": [
            [
                "5708ee6e84a79236"
            ]
        ]
    },
    {
        "id": "5708ee6e84a79236",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Ticket ${msg.queryParameters.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2040,
        "wires": [
            [
                "0e71638816c5abdc"
            ]
        ]
    },
    {
        "id": "0e71638816c5abdc",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 2040,
        "wires": []
    },
    {
        "id": "38769624112c2a4b",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get ticket and card info",
        "query": "SELECT\n\tti.\"fareType\",\n\tti.\"balance\",\n\tti.\"dailyExpenditure\",\n\tti.\"touchedOn\",\n\tti.\"currentProduct\",\n\tti.\"prodValidated\",\n\tti.\"prodDuration\",\n\tpti.\"id\" AS \"cardID\",\n\tpti.\"type\" AS \"cardType\",\n\tpti.\"expiryDate\" AS \"cardExpiry\",\n\tpti.\"disabled\" AS \"cardDisabled\"\nFROM\n\t\"dynamic\".\"Tickets\" ti\nJOIN\n\t\"dynamic\".\"PhysicalTickets\" pti\nON\n\tpti.\"ticketID\" = ti.\"id\"\nWHERE\n\tti.\"id\" = $id\n\tAND pti.\"disabled\" = false;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 790,
        "y": 2020,
        "wires": [
            [
                "5708ee6e84a79236"
            ]
        ]
    },
    {
        "id": "f76168664b8798f2",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Create ticket",
        "info": "",
        "x": 230,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ee6a61201f53ef2e",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Query ticket information",
        "info": "",
        "x": 260,
        "y": 2100,
        "wires": []
    },
    {
        "id": "53556b08bc8efd21",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Query card information",
        "info": "",
        "x": 1540,
        "y": 1660,
        "wires": []
    },
    {
        "id": "0df96a4d7f95e734",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Disable card",
        "info": "",
        "x": 1510,
        "y": 1760,
        "wires": []
    },
    {
        "id": "28fe67c2adb5bbd0",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/card",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1540,
        "y": 1040,
        "wires": [
            [
                "6efdff8039bace59"
            ]
        ]
    },
    {
        "id": "6efdff8039bace59",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    id: msg.req.params.id\n};\nmsg.all = (msg.payload.hasOwnProperty('all') && msg.payload.all.toLowerCase() === 'true');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1040,
        "wires": [
            [
                "f25ebf3d5f43d9d3"
            ]
        ]
    },
    {
        "id": "6b48e37860657708",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get card information",
        "query": "SELECT\n\t\"id\", \"type\", \"expiryDate\", \"disabled\"\nFROM\n\t\"dynamic\".\"PhysicalTickets\"\nWHERE\n\t\"ticketID\" = $id\n\tAND \"disabled\" = false;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2120,
        "y": 1040,
        "wires": [
            [
                "d0efc3d0f215d3a2"
            ]
        ]
    },
    {
        "id": "d0efc3d0f215d3a2",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Cannot find cards associated with ticket ${msg.queryParameters.id}`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1040,
        "wires": [
            [
                "d7964d29e8ef5252"
            ]
        ]
    },
    {
        "id": "d7964d29e8ef5252",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2550,
        "y": 1040,
        "wires": []
    },
    {
        "id": "56b454370f1d824c",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/card",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1550,
        "y": 1140,
        "wires": [
            [
                "550ec01c2b8e05c0"
            ]
        ]
    },
    {
        "id": "9e745f8e3158c3b9",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get existing card",
        "query": "SELECT \"id\", \"type\" FROM \"dynamic\".\"PhysicalTickets\" WHERE \"ticketID\" = $ticketID;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2210,
        "y": 1140,
        "wires": [
            [
                "80b8e95177428e4b"
            ]
        ]
    },
    {
        "id": "80b8e95177428e4b",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if there's a card",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1960,
        "y": 1180,
        "wires": [
            [
                "ceb663f415567b36"
            ],
            [
                "7f1c026d495069b2"
            ]
        ]
    },
    {
        "id": "ceb663f415567b36",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters.cardID = msg.payload[0].id;\nif (!msg.queryParameters.hasOwnProperty('cardType')) msg.queryParameters.cardType = msg.payload[0].type;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1180,
        "wires": [
            [
                "9d861cc07acfd8ce"
            ]
        ]
    },
    {
        "id": "d0f2934c85713d4c",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 404",
        "func": "msg.statusCode = 404;\nmsg.payload = {\n    status: msg.statusCode,\n    message: `Cannot find cards associated with ticket ${msg.queryParameters.id}`,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1300,
        "wires": [
            [
                "92cf84a073b0b2df"
            ]
        ]
    },
    {
        "id": "92cf84a073b0b2df",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3150,
        "y": 1260,
        "wires": []
    },
    {
        "id": "9d861cc07acfd8ce",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Begin transaction",
        "query": "BEGIN;\n",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2430,
        "y": 1120,
        "wires": [
            [
                "3a6decd67d54dd9e"
            ]
        ]
    },
    {
        "id": "7f1c026d495069b2",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Query DB for ticket existence",
        "query": "SELECT 1 FROM \"dynamic\".\"Tickets\" WHERE \"id\" = $ticketID;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1940,
        "y": 1240,
        "wires": [
            [
                "6dbde003f59b9897"
            ]
        ]
    },
    {
        "id": "6dbde003f59b9897",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if ticket exists",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2200,
        "y": 1220,
        "wires": [
            [
                "0a9e43ebb9812fb2"
            ],
            [
                "d0f2934c85713d4c"
            ]
        ]
    },
    {
        "id": "550ec01c2b8e05c0",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    ticketID: msg.req.params.id\n};\nif (typeof msg.payload === 'object' && msg.payload.hasOwnProperty('newType')) msg.queryParameters.cardType = msg.payload.newType; // new card type override\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1140,
        "wires": [
            [
                "914afef51c277553"
            ]
        ]
    },
    {
        "id": "f25ebf3d5f43d9d3",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "",
        "property": "all",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 1040,
        "wires": [
            [
                "530329055ae55e71"
            ],
            [
                "6b48e37860657708"
            ]
        ]
    },
    {
        "id": "530329055ae55e71",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get ALL card information",
        "query": "SELECT\n\t\"id\", \"type\", \"expiryDate\", \"disabled\"\nFROM\n\t\"dynamic\".\"PhysicalTickets\"\nWHERE\n\t\"ticketID\" = $id;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2130,
        "y": 1000,
        "wires": [
            [
                "fcce2bc578bf718d"
            ]
        ]
    },
    {
        "id": "fcce2bc578bf718d",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Cannot find cards associated with ticket ${msg.queryParameters.id}`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 1000,
        "wires": [
            [
                "d7964d29e8ef5252"
            ]
        ]
    },
    {
        "id": "0a9e43ebb9812fb2",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if new card type has been set",
        "property": "queryParameters",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "cardType",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2490,
        "y": 1220,
        "wires": [
            [
                "776393f70f21c404"
            ],
            [
                "41ba0be76720ecbd"
            ]
        ]
    },
    {
        "id": "41ba0be76720ecbd",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: `No new card types specified for ticket ${msg.queryParameters.id} with no currently valid card`,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1260,
        "wires": [
            [
                "92cf84a073b0b2df"
            ]
        ]
    },
    {
        "id": "776393f70f21c404",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Create new card",
        "query": "INSERT INTO \"dynamic\".\"PhysicalTickets\" (\"id\", \"type\", \"ticketID\") VALUES ($newCardID, $cardType, $ticketID);",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2760,
        "y": 1240,
        "wires": [
            [
                "7187f7a8c06c3644"
            ]
        ]
    },
    {
        "id": "914afef51c277553",
        "type": "uuid",
        "z": "216f0e6810bad0c9",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "Generate new card ID",
        "field": "queryParameters.newCardID",
        "fieldType": "msg",
        "x": 2000,
        "y": 1140,
        "wires": [
            [
                "9e745f8e3158c3b9"
            ]
        ]
    },
    {
        "id": "3a6decd67d54dd9e",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Disable old card",
        "query": "UPDATE \"dynamic\".\"PhysicalTickets\" SET \"disabled\" = true WHERE \"id\" = $cardID;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2460,
        "y": 1160,
        "wires": [
            [
                "391fb2046440c408"
            ]
        ]
    },
    {
        "id": "391fb2046440c408",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Create new card",
        "query": "INSERT INTO \"dynamic\".\"PhysicalTickets\" (\"id\", \"type\", \"ticketID\") VALUES ($newCardID, $cardType, $ticketID);",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2660,
        "y": 1120,
        "wires": [
            [
                "c118151c8e10fdec"
            ]
        ]
    },
    {
        "id": "c118151c8e10fdec",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Commit transaction",
        "query": "COMMIT;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2690,
        "y": 1160,
        "wires": [
            [
                "7187f7a8c06c3644"
            ]
        ]
    },
    {
        "id": "7187f7a8c06c3644",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: {\n        cardID: msg.queryParameters.newCardID,\n        cardType: msg.queryParameters.cardType\n    },\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 1220,
        "wires": [
            [
                "92cf84a073b0b2df"
            ]
        ]
    },
    {
        "id": "cb8bcaa8e9d6acdd",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Generate new card for ticket",
        "info": "",
        "x": 1560,
        "y": 1180,
        "wires": []
    },
    {
        "id": "065fac396aaa6894",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Get ticket's associated card",
        "info": "",
        "x": 1560,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b68e76cbe7d58619",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/card",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1550,
        "y": 1380,
        "wires": [
            [
                "fd597230f51c98ca"
            ]
        ]
    },
    {
        "id": "fd597230f51c98ca",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    id: msg.req.params.id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1380,
        "wires": [
            [
                "3985c78ceabc1e39"
            ]
        ]
    },
    {
        "id": "3985c78ceabc1e39",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Disable card",
        "query": "UPDATE\n\t\"dynamic\".\"PhysicalTickets\"\nSET\n\t\"disabled\" = true\nWHERE\n\t\"ticketID\" = $id;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1970,
        "y": 1380,
        "wires": [
            [
                "6a7094752c97c0f7"
            ]
        ]
    },
    {
        "id": "6a7094752c97c0f7",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.pgsql.rowCount == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Ticket ${msg.queryParameters.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Card(s) associated with ${msg.queryParameters.id} disabled`\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1380,
        "wires": [
            [
                "b4fb39c569009a3c"
            ]
        ]
    },
    {
        "id": "b4fb39c569009a3c",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2330,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c1625c8d1858106d",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Disable card associated with ticket",
        "info": "",
        "x": 1580,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ae8d6045ddd5647d",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "38769624112c2a4b",
            "40b1c0ccf420fd49"
        ],
        "uncaught": false,
        "x": 770,
        "y": 1980,
        "wires": [
            [
                "c9f515cb25de2502"
            ]
        ]
    },
    {
        "id": "c9f515cb25de2502",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1980,
        "wires": [
            [
                "0e71638816c5abdc"
            ]
        ]
    },
    {
        "id": "93fa7f129c68fe79",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "530329055ae55e71",
            "6b48e37860657708"
        ],
        "uncaught": false,
        "x": 2150,
        "y": 960,
        "wires": [
            [
                "d9eb92a6b4e20485"
            ]
        ]
    },
    {
        "id": "d9eb92a6b4e20485",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 960,
        "wires": [
            [
                "d7964d29e8ef5252"
            ]
        ]
    },
    {
        "id": "bef51f9716784662",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "7f1c026d495069b2",
            "9e745f8e3158c3b9"
        ],
        "uncaught": false,
        "x": 2790,
        "y": 1320,
        "wires": [
            [
                "24e0064e7c2c8927"
            ]
        ]
    },
    {
        "id": "24e0064e7c2c8927",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 1320,
        "wires": [
            [
                "92cf84a073b0b2df"
            ]
        ]
    },
    {
        "id": "bf456f50f9efd058",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Error occurred performing transaction: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 1180,
        "wires": [
            [
                "92cf84a073b0b2df"
            ]
        ]
    },
    {
        "id": "2a1c3fe8bcca75a0",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch transaction errors",
        "scope": [
            "9d861cc07acfd8ce",
            "3a6decd67d54dd9e",
            "391fb2046440c408",
            "c118151c8e10fdec"
        ],
        "uncaught": false,
        "x": 2900,
        "y": 1140,
        "wires": [
            [
                "bf456f50f9efd058"
            ]
        ]
    },
    {
        "id": "0f768881fc077920",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch operation error",
        "scope": [
            "3985c78ceabc1e39"
        ],
        "uncaught": false,
        "x": 1960,
        "y": 1420,
        "wires": [
            [
                "5ff6801067fa2576"
            ]
        ]
    },
    {
        "id": "5ff6801067fa2576",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Error occurred disabling card: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1420,
        "wires": [
            [
                "b4fb39c569009a3c"
            ]
        ]
    },
    {
        "id": "131c1f631523408b",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch operation error",
        "scope": [
            "b57105718d3f8a7b"
        ],
        "uncaught": false,
        "x": 1960,
        "y": 1760,
        "wires": [
            [
                "ed61ae4af85228b7"
            ]
        ]
    },
    {
        "id": "ed61ae4af85228b7",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Error occurred disabling card: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1760,
        "wires": [
            [
                "380dc7f55b783b4b"
            ]
        ]
    },
    {
        "id": "6d7c87b56c8b3ee5",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "e84002f37c8f8737",
            "5bcf7b2148a063a3"
        ],
        "uncaught": false,
        "x": 2090,
        "y": 1520,
        "wires": [
            [
                "0c86b6465b177594"
            ]
        ]
    },
    {
        "id": "0c86b6465b177594",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1540,
        "wires": [
            [
                "a9da3c9395df356a"
            ]
        ]
    },
    {
        "id": "3a4ace16e67fdce0",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 2160,
        "wires": [
            [
                "b0a3b09696f52da3"
            ]
        ]
    },
    {
        "id": "b0a3b09696f52da3",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Form list of attributes to change",
        "func": "let attribs = {\n    'fareType': 'fareType',\n    'balance': 'balance',\n    'dailyExpenditure': 'dailyExpenditure',\n    'touchedOn': 'touchedOn',\n    'currentProduct': 'currentProduct',\n    'prodValidated': 'prodValidated',\n    'prodDuration': 'prodDuration'\n}; // mapping from request key to column\n\nmsg.sqlQuery = {\n    table: '\"dynamic\".\"Tickets\"',\n    whereCol: '\"id\"',\n    whereVal: msg.req.params.id,\n    val: {}\n};\nif (typeof msg.payload === 'object') {\n    for (const key in attribs) {\n        if(msg.payload.hasOwnProperty(key)) msg.sqlQuery.val[key] = msg.payload[key];\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2160,
        "wires": [
            [
                "94444023f509e328"
            ]
        ]
    },
    {
        "id": "94444023f509e328",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if there are values to update",
        "property": "sqlQuery.val",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 2200,
        "wires": [
            [
                "cff3b0e91217ddcd"
            ],
            [
                "bd043128789c9616"
            ]
        ]
    },
    {
        "id": "bd043128789c9616",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2260,
        "wires": [
            [
                "4168021b8fe0200d"
            ]
        ]
    },
    {
        "id": "4168021b8fe0200d",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 2220,
        "wires": []
    },
    {
        "id": "cff3b0e91217ddcd",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Form SQL query",
        "func": "msg.params = Object.values(msg.sqlQuery.val);\nmsg.params.push(msg.sqlQuery.whereVal);\n\nlet values = [];\nlet i = 1;\nfor (const key in msg.sqlQuery.val)\n    values.push(`\"${key}\" = \\$${i++}`);\n\nmsg.query = `UPDATE ${msg.sqlQuery.table} SET ${values.join(', ')} WHERE ${msg.sqlQuery.whereCol} = \\$${i} RETURNING *;`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2160,
        "wires": [
            [
                "c675abdde12f6c3e"
            ]
        ]
    },
    {
        "id": "c675abdde12f6c3e",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Run SQL query",
        "query": "SELECT * FROM ;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 2160,
        "wires": [
            [
                "82e0bdcfd0640505"
            ]
        ]
    },
    {
        "id": "82e0bdcfd0640505",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Ticket ${msg.req.params.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n    msg.payload.message.prodExpiry = msg.payload.message.productExpiry;\n    delete msg.payload.message.productExpiry; // rename\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2220,
        "wires": [
            [
                "4168021b8fe0200d"
            ]
        ]
    },
    {
        "id": "7e56467fce74625c",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Change ticket data",
        "info": "",
        "x": 250,
        "y": 2200,
        "wires": []
    },
    {
        "id": "70fdfe684e61598b",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch operation error",
        "scope": [
            "c675abdde12f6c3e"
        ],
        "uncaught": false,
        "x": 520,
        "y": 2300,
        "wires": [
            [
                "b9f1b444d7b033e5"
            ]
        ]
    },
    {
        "id": "b9f1b444d7b033e5",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 400 (for SQL operation error)",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'SQL operation failed: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2300,
        "wires": [
            [
                "4168021b8fe0200d"
            ]
        ]
    },
    {
        "id": "84f50cc7f58d7242",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/transactions",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1570,
        "y": 1820,
        "wires": [
            [
                "0393932867b35b8b"
            ]
        ]
    },
    {
        "id": "3a52bb1dc39aef00",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Get transactions associated with ticket",
        "info": "",
        "x": 1590,
        "y": 1860,
        "wires": []
    },
    {
        "id": "0393932867b35b8b",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.query = 'SELECT \"id\", \"timestamp\", \"type\", \"location\", \"product\", \"balance\" FROM \"dynamic\".\"Transactions\" WHERE \"ticketID\" = $id'; // base query\nmsg.queryParameters = {\n    id: msg.req.params.id\n};\n\nif (msg.payload.hasOwnProperty('validateOnly') && msg.payload.validateOnly.toLowerCase() === 'true')\n    msg.query += ' AND \"type\" <= 2'; // touch on/off transactions only\n\nmsg.query += ' ORDER BY \"timestamp\" DESC';\n\nif (msg.payload.hasOwnProperty('limit') && !isNaN(msg.payload.limit)) {\n    msg.queryParameters.limit = parseInt(msg.payload.limit);\n    msg.query += ' LIMIT $limit';\n}\n\nmsg.query += ';'; // terminate\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1820,
        "wires": [
            [
                "d235afb153a94490"
            ]
        ]
    },
    {
        "id": "d235afb153a94490",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get transactions",
        "query": "",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2020,
        "y": 1820,
        "wires": [
            [
                "9fa43e7992204eb1"
            ]
        ]
    },
    {
        "id": "01671c1b76da7fed",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2450,
        "y": 1820,
        "wires": []
    },
    {
        "id": "3cd68ab9f9219a60",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "d235afb153a94490",
            "475de6df55aad125"
        ],
        "uncaught": false,
        "x": 2110,
        "y": 1860,
        "wires": [
            [
                "10e08ba75b5cad21"
            ]
        ]
    },
    {
        "id": "10e08ba75b5cad21",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1860,
        "wires": [
            [
                "01671c1b76da7fed"
            ]
        ]
    },
    {
        "id": "9fa43e7992204eb1",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: msg.payload,\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1820,
        "wires": [
            [
                "01671c1b76da7fed"
            ]
        ]
    },
    {
        "id": "6aa6ddccbb38ce2d",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/transactions/:tid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1580,
        "y": 2080,
        "wires": [
            [
                "ad331bd93c2ad7f4"
            ]
        ]
    },
    {
        "id": "9665d74a34912ad0",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Get transaction details",
        "info": "",
        "x": 1540,
        "y": 2120,
        "wires": []
    },
    {
        "id": "ad331bd93c2ad7f4",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = msg.req.params;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 2080,
        "wires": [
            [
                "d1eb7892d58da622"
            ]
        ]
    },
    {
        "id": "d1eb7892d58da622",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get transaction details",
        "query": "SELECT\n    \"id\", \"timestamp\", \"type\", \"location\", \"product\", \"balance\"\nFROM\n    \"dynamic\".\"Transactions\"\nWHERE\n    \"id\" = $tid\n    AND \"ticketID\" = $id;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2060,
        "y": 2080,
        "wires": [
            [
                "59a2dc40783fce30"
            ]
        ]
    },
    {
        "id": "59a2dc40783fce30",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Transaction ${msg.queryParameters.tid} for ticket ${msg.queryParameters.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2080,
        "wires": [
            [
                "f7ef8dcddf0b1f81"
            ]
        ]
    },
    {
        "id": "f7ef8dcddf0b1f81",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2450,
        "y": 2080,
        "wires": []
    },
    {
        "id": "1891c609c1106693",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "d1eb7892d58da622"
        ],
        "uncaught": false,
        "x": 2070,
        "y": 2120,
        "wires": [
            [
                "c1bf38d9f370563d"
            ]
        ]
    },
    {
        "id": "c1bf38d9f370563d",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2120,
        "wires": [
            [
                "f7ef8dcddf0b1f81"
            ]
        ]
    },
    {
        "id": "7a1295909e46d093",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/transactions",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1570,
        "y": 2180,
        "wires": [
            [
                "de63dfed72c34983"
            ]
        ]
    },
    {
        "id": "4dc735d96d309a28",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Add transaction",
        "info": "",
        "x": 1520,
        "y": 2220,
        "wires": []
    },
    {
        "id": "de63dfed72c34983",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    ticketID: msg.req.params.id,\n    id: crypto.randomUUID(),\n    timestamp: new Date().toISOString(),\n    product: 0\n};\n\nif (typeof msg.payload === 'object') {\n    if (msg.payload.hasOwnProperty('id') && typeof msg.payload.id === 'string')\n        msg.queryParameters.id = msg.payload.id;\n    if (msg.payload.hasOwnProperty('timestamp') && typeof msg.payload.timestamp === 'string')\n        msg.queryParameters.timestamp = msg.payload.timestamp;\n    if (msg.payload.hasOwnProperty('type') && typeof msg.payload.type === 'number')\n        msg.queryParameters.type = msg.payload.type;\n    if (msg.payload.hasOwnProperty('location') && typeof msg.payload.location === 'number')\n        msg.queryParameters.location = msg.payload.location;\n    if (msg.payload.hasOwnProperty('product') && typeof msg.payload.product === 'number')\n        msg.queryParameters.product = msg.payload.product;\n    if (msg.payload.hasOwnProperty('balance') && typeof msg.payload.balance === 'number')\n        msg.queryParameters.balance = msg.payload.balance;\n    \n    if (msg.queryParameters.type == 5 && msg.payload.hasOwnProperty('pass') && typeof msg.payload.pass === 'object') {\n        /* pass purchase */\n        if (msg.payload.pass.hasOwnProperty('duration') && typeof msg.payload.pass.duration === 'number')\n            msg.queryParameters.passDuration = msg.payload.pass.duration;\n        // if (msg.payload.pass.hasOwnProperty('activationDate') && typeof msg.payload.pass.activationDate === 'string')\n        //     msg.queryParameters.passDate = msg.payload.pass.activationDate;\n        // else\n        //     msg.queryParameters.passDate = new Date().toDateString();\n        if (msg.payload.pass.hasOwnProperty('product') && typeof msg.payload.pass.product === 'number')\n            msg.queryParameters.passProduct = msg.payload.pass.product;\n    }\n}\n\nmsg.ok = (\n    msg.queryParameters.hasOwnProperty('type')\n    && msg.queryParameters.hasOwnProperty('location')\n    && msg.queryParameters.hasOwnProperty('balance')\n) && (\n    msg.queryParameters.type != 5\n    || (\n        msg.queryParameters.hasOwnProperty('passDuration')\n        // && msg.queryParameters.hasOwnProperty('passDate')\n        && msg.queryParameters.hasOwnProperty('passProduct')\n    )\n);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 1820,
        "y": 2180,
        "wires": [
            [
                "dce53df4ec0784d7",
                "9d62f383a62704cf"
            ]
        ]
    },
    {
        "id": "dce53df4ec0784d7",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if request is OK",
        "property": "ok",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2060,
        "y": 2180,
        "wires": [
            [
                "3455b73e5dac85cf"
            ],
            [
                "89ed8951d38377ff"
            ]
        ]
    },
    {
        "id": "3455b73e5dac85cf",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 400",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Invalid body',\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 2180,
        "wires": [
            [
                "536828419d6dc501"
            ]
        ]
    },
    {
        "id": "536828419d6dc501",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2710,
        "y": 2160,
        "wires": []
    },
    {
        "id": "f1da67b1478fa151",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Insert transaction",
        "query": "INSERT INTO\n    \"dynamic\".\"Transactions\"\n    (\"id\", \"ticketID\", \"timestamp\", \"type\", \"location\", \"product\", \"balance\")\nVALUES\n    ($id, $ticketID, $timestamp, $type, $location, $product, $balance)\nRETURNING\n    \"id\", \"timestamp\", \"type\", \"location\", \"product\", \"balance\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2270,
        "y": 2240,
        "wires": [
            [
                "b66465bbcbc2fca0"
            ]
        ]
    },
    {
        "id": "f6491c3f4663a912",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch operation error",
        "scope": [
            "f1da67b1478fa151",
            "5efa96c2d1a34475",
            "bcb718bb7da91a58",
            "b1c4776e9a6865f4",
            "eab9056422f4e84d",
            "57f31eaed7344a74"
        ],
        "uncaught": false,
        "x": 2240,
        "y": 2400,
        "wires": [
            [
                "894c13bad33e5c2f"
            ]
        ]
    },
    {
        "id": "894c13bad33e5c2f",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 400 (for SQL operation error)",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'SQL operation failed: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 2400,
        "wires": [
            [
                "536828419d6dc501"
            ]
        ]
    },
    {
        "id": "b66465bbcbc2fca0",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if (msg.payload.length == 0) {\n    msg.statusCode = 500;\n    msg.payload = {\n        status: msg.statusCode,\n        message: 'Transaction not recorded',\n        time: Date.now()\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0],\n        time: Date.now()\n    };\n    if(msg.payload.message.hasOwnProperty('passProduct')) {\n        msg.payload.message.pass = {\n            duration: msg.payload.message.passDuration,\n            product: msg.payload.message.passProduct\n        };\n        delete msg.payload.message.passDuration;\n        delete msg.payload.message.passProduct;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 2220,
        "wires": [
            [
                "536828419d6dc501"
            ]
        ]
    },
    {
        "id": "9ad497bcc97213e0",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/passes",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1550,
        "y": 2460,
        "wires": [
            [
                "318a083392544f70"
            ]
        ]
    },
    {
        "id": "ec1409c877b56b96",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Get transit passes associated with ticket",
        "info": "",
        "x": 1590,
        "y": 2500,
        "wires": []
    },
    {
        "id": "318a083392544f70",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    ticketID: msg.req.params.id\n};\nmsg.all = (msg.payload.hasOwnProperty('all') && msg.payload.all.toLowerCase() === 'true');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2460,
        "wires": [
            [
                "c15809b452448dd8"
            ]
        ]
    },
    {
        "id": "c15809b452448dd8",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if all passes are to be retrieved",
        "property": "all",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 2500,
        "wires": [
            [
                "c6c46b081f3442fd"
            ],
            [
                "1ab0dc1295bac028"
            ]
        ]
    },
    {
        "id": "c6c46b081f3442fd",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get all passes",
        "query": "SELECT\n\tp.\"transactionID\", p.\"duration\", p.\"activationDate\", p.\"product\"\nFROM\n\t\"dynamic\".\"Passes\" p\nJOIN\n\t\"dynamic\".\"Transactions\" t\nON\n\tt.\"id\" = p.\"transactionID\"\nWHERE\n\tt.\"ticketID\" = $ticketID\nORDER BY\n\tt.\"timestamp\" DESC;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2180,
        "y": 2460,
        "wires": [
            [
                "fe8dc79f761b31fe"
            ]
        ]
    },
    {
        "id": "1ab0dc1295bac028",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get unactivated and non-expired passes",
        "query": "SELECT\n\tp.\"transactionID\", p.\"duration\", p.\"activationDate\", p.\"product\"\nFROM\n\t\"dynamic\".\"Passes\" p\nJOIN\n\t\"dynamic\".\"Transactions\" t\nON\n\tt.\"id\" = p.\"transactionID\"\nWHERE\n\tt.\"ticketID\" = $ticketID\n    AND (\n        p.\"activationDate\" IS NULL\n        OR p.\"activationDate\" + p.\"duration\" * INTERVAL '1 day' > CURRENT_DATE\n    )\nORDER BY\n\tt.\"timestamp\" DESC;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2260,
        "y": 2500,
        "wires": [
            [
                "fe8dc79f761b31fe"
            ]
        ]
    },
    {
        "id": "b5017bcb023dafcc",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "1ab0dc1295bac028",
            "c6c46b081f3442fd"
        ],
        "uncaught": false,
        "x": 2350,
        "y": 2540,
        "wires": [
            [
                "baec7bc17db18cf9"
            ]
        ]
    },
    {
        "id": "baec7bc17db18cf9",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 2540,
        "wires": [
            [
                "a7b72d6485158870"
            ]
        ]
    },
    {
        "id": "fe8dc79f761b31fe",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: msg.payload,\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 2460,
        "wires": [
            [
                "a7b72d6485158870"
            ]
        ]
    },
    {
        "id": "a7b72d6485158870",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2710,
        "y": 2440,
        "wires": []
    },
    {
        "id": "0588a9d7426e1357",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/passes/:tid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1560,
        "y": 2600,
        "wires": [
            [
                "bb87c5e3f7c802f8"
            ]
        ]
    },
    {
        "id": "f9b088804fac7542",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Get transit pass details",
        "info": "",
        "x": 1540,
        "y": 2640,
        "wires": []
    },
    {
        "id": "bb87c5e3f7c802f8",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    ticketID: msg.req.params.id,\n    transID: msg.req.params.tid\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2600,
        "wires": [
            [
                "afedf0010d3b8d37"
            ]
        ]
    },
    {
        "id": "afedf0010d3b8d37",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get pass",
        "query": "SELECT\n\tp.\"transactionID\", p.\"duration\", p.\"activationDate\", p.\"product\"\nFROM\n\t\"dynamic\".\"Passes\" p\nJOIN\n\t\"dynamic\".\"Transactions\" t\nON\n\tt.\"id\" = p.\"transactionID\"\nWHERE\n\tt.\"ticketID\" = $ticketID\n\tAND p.\"transactionID\" = $transID;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1980,
        "y": 2600,
        "wires": [
            [
                "e64c7b1315d1d07e"
            ]
        ]
    },
    {
        "id": "fdd0cce98d00a564",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "afedf0010d3b8d37"
        ],
        "uncaught": false,
        "x": 1970,
        "y": 2640,
        "wires": [
            [
                "a92159f643756810"
            ]
        ]
    },
    {
        "id": "a92159f643756810",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2640,
        "wires": [
            [
                "a71f72fb5f0b9cda"
            ]
        ]
    },
    {
        "id": "e64c7b1315d1d07e",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Pass transaction ${msg.queryParameters.tid} for ticket ${msg.queryParameters.id} not found`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2600,
        "wires": [
            [
                "a71f72fb5f0b9cda"
            ]
        ]
    },
    {
        "id": "a71f72fb5f0b9cda",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2330,
        "y": 2600,
        "wires": []
    },
    {
        "id": "89ed8951d38377ff",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if pass purchase",
        "property": "queryParameters.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 2260,
        "wires": [
            [
                "f1da67b1478fa151"
            ],
            [
                "5efa96c2d1a34475"
            ]
        ]
    },
    {
        "id": "5efa96c2d1a34475",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Begin transaction",
        "query": "BEGIN;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1950,
        "y": 2280,
        "wires": [
            [
                "bcb718bb7da91a58"
            ]
        ]
    },
    {
        "id": "eab9056422f4e84d",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Commit transaction",
        "query": "COMMIT;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2130,
        "y": 2340,
        "wires": [
            [
                "57f31eaed7344a74"
            ]
        ]
    },
    {
        "id": "bcb718bb7da91a58",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Insert transaction",
        "query": "INSERT INTO\n    \"dynamic\".\"Transactions\"\n    (\"id\", \"ticketID\", \"timestamp\", \"type\", \"location\", \"product\", \"balance\")\nVALUES\n    ($id, $ticketID, $timestamp, $type, $location, $product, $balance);",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2170,
        "y": 2280,
        "wires": [
            [
                "b1c4776e9a6865f4"
            ]
        ]
    },
    {
        "id": "b1c4776e9a6865f4",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Insert pass",
        "query": "INSERT INTO\n    \"dynamic\".\"Passes\"\n    (\"transactionID\", \"ticketID\", \"duration\", \"product\")\nVALUES\n    ($id, $ticketID, $passDuration, $passProduct);",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1930,
        "y": 2340,
        "wires": [
            [
                "eab9056422f4e84d"
            ]
        ]
    },
    {
        "id": "57f31eaed7344a74",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Re-fetch transaction",
        "query": "SELECT\n    t.\"id\", t.\"timestamp\", t.\"type\", t.\"location\", t.\"product\", t.\"balance\",\n    p.\"duration\" AS \"passDuration\", p.\"product\" AS \"passProduct\"\nFROM\n    \"dynamic\".\"Transactions\" t\nJOIN\n\t\"dynamic\".\"Passes\" p\nON\n\tt.\"id\" = p.\"transactionID\"\nWHERE\n    t.\"id\" = $id;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2360,
        "y": 2340,
        "wires": [
            [
                "b66465bbcbc2fca0"
            ]
        ]
    },
    {
        "id": "3b14ea7780663092",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/locations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1500,
        "wires": [
            [
                "b8faad5356599643"
            ]
        ]
    },
    {
        "id": "b8faad5356599643",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate locations list response",
        "func": "let payload = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('locations') || null);\nif (payload !== null) {\n    if (msg.payload.hasOwnProperty('dict') && msg.payload.dict.toLowerCase() === 'true') {\n        payload = Object.assign({}, payload); // convert to object\n    }\n}\n\nmsg.statusCode = (payload === null) ? 503 : 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: (msg.statusCode == 503)\n        ? 'Static database cache is expired'\n        : payload,\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1500,
        "wires": [
            [
                "d3cb9480b54083dd"
            ]
        ]
    },
    {
        "id": "d3cb9480b54083dd",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1500,
        "wires": []
    },
    {
        "id": "22e2bc9a223ae8fb",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/locations/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1560,
        "wires": [
            [
                "95ec89c797d2f380"
            ]
        ]
    },
    {
        "id": "95ec89c797d2f380",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate location details response",
        "func": "let locations = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('locations') || null);\nif (locations !== null) {\n    let id = parseInt(msg.req.params.id);\n    if(!isNaN(msg.req.params.id) && id >= 0 && id < locations.length) {\n        msg.statusCode = 200;\n        msg.payload = {\n            status: msg.statusCode,\n            message: {\n                name: locations[id].name,\n                mode: locations[id].mode,\n                minProduct: locations[id].minProduct,\n                defaultProduct: locations[id].defaultProduct\n            }\n        };\n        if (msg.payload.hasOwnProperty('zone') && msg.payload.zone.toLowerCase() === 'true')\n            msg.payload.message.zone = flow.get('products')[msg.payload.message.minProduct].fromZone; // we assume the minimum product is single zone\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            status: msg.statusCode,\n            message: 'Invalid location ID given'\n        };\n    }\n} else {\n    msg.statusCode = 503;\n    msg.payload = {\n        status: msg.statusCode,\n        message: 'Static database cache is expired'\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1560,
        "wires": [
            [
                "6028d8ca42b68732"
            ]
        ]
    },
    {
        "id": "6028d8ca42b68732",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1560,
        "wires": []
    },
    {
        "id": "0d7e9812870ead24",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get locations",
        "query": "SELECT * FROM \"static\".\"Locations\" ORDER BY \"id\" ASC;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "873bc948835e2e1e"
            ]
        ]
    },
    {
        "id": "873bc948835e2e1e",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Save locations to context",
        "func": "flow.set('locations', msg.payload); // since we've ordered location IDs there's no need to change anything\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1020,
        "wires": [
            [
                "a030b80886673d51"
            ]
        ]
    },
    {
        "id": "e24b4f729e7af1e4",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/passes/:tid",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1570,
        "y": 2700,
        "wires": [
            [
                "82fafe4c4b9103c4"
            ]
        ]
    },
    {
        "id": "84886fc7120f393f",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Activate transit pass",
        "info": "",
        "x": 1530,
        "y": 2740,
        "wires": []
    },
    {
        "id": "82fafe4c4b9103c4",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "msg.queryParameters = {\n    ticketID: msg.req.params.id,\n    transID: msg.req.params.tid\n};\nif (msg.payload.hasOwnProperty('date')) msg.queryParameters.date = msg.payload.date;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 2700,
        "wires": [
            [
                "b02c690aa2958c7d"
            ]
        ]
    },
    {
        "id": "e6a0f8ec4d5cc26e",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Activate pass",
        "query": "UPDATE\n\t\"dynamic\".\"Passes\"\nSET\n\t\"activationDate\" = CURRENT_DATE\nWHERE\n\t\"ticketID\" = $ticketID\n\tAND \"transactionID\" = $transID\n\tAND \"activationDate\" IS NULL\nRETURNING\n\t\"ticketID\", \"transactionID\", \"activationDate\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2250,
        "y": 2720,
        "wires": [
            [
                "b29b6f34c8f5d334"
            ]
        ]
    },
    {
        "id": "241faa29e85a2c51",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "e6a0f8ec4d5cc26e"
        ],
        "uncaught": false,
        "x": 2310,
        "y": 2760,
        "wires": [
            [
                "aa7d0b17428e6e72"
            ]
        ]
    },
    {
        "id": "aa7d0b17428e6e72",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 2760,
        "wires": [
            [
                "5c29776afb04fa71"
            ]
        ]
    },
    {
        "id": "b29b6f34c8f5d334",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "if(msg.payload.length == 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        status: msg.statusCode,\n        message: `Pass ${msg.req.params.tid} for ticket ${msg.req.params.id} not found or already activated`\n    };\n} else {\n    msg.statusCode = 200;\n    msg.payload = {\n        status: msg.statusCode,\n        message: msg.payload[0]\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 2720,
        "wires": [
            [
                "5c29776afb04fa71"
            ]
        ]
    },
    {
        "id": "5c29776afb04fa71",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2730,
        "y": 2720,
        "wires": []
    },
    {
        "id": "60814e32e0a4bda5",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate product details response",
        "func": "let products = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('products') || null);\nif (products !== null) {\n    let id = parseInt(msg.req.params.id);\n    if (!isNaN(msg.req.params.id) && id >= 0 && id < products.length) {\n        msg.statusCode = 200;\n        msg.payload = {\n            status: msg.statusCode,\n            message: products[id]\n        };\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            status: msg.statusCode,\n            message: 'Invalid product ID given'\n        };\n    }\n} else {\n    msg.statusCode = 503;\n    msg.payload = {\n        status: msg.statusCode,\n        message: 'Static database cache is expired'\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1200,
        "wires": [
            [
                "465990403f5c1775"
            ]
        ]
    },
    {
        "id": "4eab7772f0431889",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/products/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "60814e32e0a4bda5"
            ]
        ]
    },
    {
        "id": "465990403f5c1775",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1200,
        "wires": []
    },
    {
        "id": "e9115b38054562c2",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/tickets/:id/prodbits",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 2380,
        "wires": [
            [
                "ac5bb85c98d80d8c"
            ]
        ]
    },
    {
        "id": "71ad90a9eac6b62d",
        "type": "comment",
        "z": "216f0e6810bad0c9",
        "name": "Get ticket's daily travelled products bits",
        "info": "",
        "x": 310,
        "y": 2420,
        "wires": []
    },
    {
        "id": "ac5bb85c98d80d8c",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Set query parameters",
        "func": "let time = new Date();\nif (time.getHours() < 3) time.setDate(time.getDate() - 1); // belongs to previous day\ntime.setHours(3, 0, 0, 0);\n\nmsg.queryParameters = {\n    ticketID: msg.req.params.id\n};\nmsg.queryParameters.fromTime = time.toISOString();\ntime.setDate(time.getDate() + 1); msg.queryParameters.toTime = time.toISOString();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2380,
        "wires": [
            [
                "5735526f335050d9"
            ]
        ]
    },
    {
        "id": "5735526f335050d9",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Get transactions",
        "query": "SELECT\n    \"product\"\nFROM\n    \"dynamic\".\"Transactions\"\nWHERE\n    \"ticketID\" = $ticketID\n    AND \"timestamp\" >= $fromTime AND \"timestamp\" < $toTime\n    AND (\"type\" = 1 OR \"type\" = 2)\n    AND \"product\" != 0;",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 2380,
        "wires": [
            [
                "d3b51e73efdc033c"
            ]
        ]
    },
    {
        "id": "6b13118d9a7f048e",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 2380,
        "wires": []
    },
    {
        "id": "2a46a0feec8d9f5c",
        "type": "catch",
        "z": "216f0e6810bad0c9",
        "name": "Catch query errors",
        "scope": [
            "5735526f335050d9",
            "475de6df55aad125"
        ],
        "uncaught": false,
        "x": 690,
        "y": 2420,
        "wires": [
            [
                "52a6bf577264cf68"
            ]
        ]
    },
    {
        "id": "52a6bf577264cf68",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return 500",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    status: msg.statusCode,\n    message: 'Query error: ' + msg.payload,\n    time: Date.now()\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2420,
        "wires": [
            [
                "6b13118d9a7f048e"
            ]
        ]
    },
    {
        "id": "d3b51e73efdc033c",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Return response",
        "func": "let bits1 = Array(16).fill(0); // 2hr\nlet bits2 = Array(16).fill(0); // daily (2nd occurrence)\n\nmsg.payload.forEach((entry) => {\n    let prod = entry.product;\n    let byte = Math.floor(prod / 8), bit = prod % 8;\n    if (bits1[byte] & (1 << bit)) bits2[byte] |= (1 << bit);\n    else bits1[byte] |= (1 << bit);\n});\n\nmsg.statusCode = 200;\nmsg.payload = {\n    status: msg.statusCode,\n    message: [\n        Buffer.from(bits1).toString('base64'),\n        Buffer.from(bits2).toString('base64')\n    ],\n    time: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2380,
        "wires": [
            [
                "6b13118d9a7f048e"
            ]
        ]
    },
    {
        "id": "a946dda6d0f828b9",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/products/search/:idFrom/:idTo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "f981944734ee3c05"
            ]
        ]
    },
    {
        "id": "f981944734ee3c05",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate product response",
        "func": "let products = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('products') || null);\nif (products !== null) {\n    let prodID = -1, prodDelta = 9999; // product ID and number of additional zones that the found product covers\n    for (let i = 0; i < products.length; i++) {\n        if (products[i].fromZone <= msg.req.params.idFrom && products[i].toZone >= msg.req.params.idTo) {\n            let delta = (msg.req.params.idFrom - products[i].fromZone) + (products[i].toZone - msg.req.params.idTo);\n            if (delta < prodDelta) {\n                prodID = i;\n                prodDelta = delta;\n            }\n        }\n    }\n    if (prodID < 0) {\n        msg.statusCode = 404;\n        msg.payload = {\n            status: msg.statusCode,\n            message: `Cannot find any product for zones ${msg.req.params.idFrom} -> ${msg.req.params.idTo}`\n        };\n    } else {\n        msg.statusCode = 200;\n        msg.payload = {\n            status: msg.statusCode,\n            message: {\n                id: prodID,\n                delta: prodDelta,\n                details: products[prodID]\n            }\n        };\n    }\n} else {\n    msg.statusCode = 503;\n    msg.payload = {\n        status: msg.statusCode,\n        message: 'Static database cache is expired'\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1260,
        "wires": [
            [
                "430d42752e556d2a"
            ]
        ]
    },
    {
        "id": "430d42752e556d2a",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1260,
        "wires": []
    },
    {
        "id": "96aaab943bb2530e",
        "type": "function",
        "z": "216f0e6810bad0c9",
        "name": "Generate fare type info response",
        "func": "let fareTypes = (Date.now() >= (flow.get('staticExpiry') || new Date(0)))\n    ? null\n    : (flow.get('fareTypes') || null);\nif (fareTypes !== null) {\n    let id = parseInt(msg.req.params.id);\n    if (!isNaN(msg.req.params.id) && id >= 0 && id < fareTypes.length) {\n        msg.statusCode = 200;\n        msg.payload = {\n            status: msg.statusCode,\n            message: fareTypes[id]\n        };\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            status: msg.statusCode,\n            message: 'Invalid fare type given'\n        };\n    }\n} else {\n    msg.statusCode = 503;\n    msg.payload = {\n        status: msg.statusCode,\n        message: 'Static database cache is expired'\n    };\n}\nmsg.payload.time = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1380,
        "wires": [
            [
                "2efa954f47b88681"
            ]
        ]
    },
    {
        "id": "3087367d2d4153c9",
        "type": "http in",
        "z": "216f0e6810bad0c9",
        "name": "",
        "url": "/api/fareTypes/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1380,
        "wires": [
            [
                "96aaab943bb2530e"
            ]
        ]
    },
    {
        "id": "2efa954f47b88681",
        "type": "http response",
        "z": "216f0e6810bad0c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b02c690aa2958c7d",
        "type": "switch",
        "z": "216f0e6810bad0c9",
        "name": "Check if date is specified",
        "property": "queryParameters",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "date",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2050,
        "y": 2700,
        "wires": [
            [
                "09d81f97509a39ac"
            ],
            [
                "e6a0f8ec4d5cc26e"
            ]
        ]
    },
    {
        "id": "09d81f97509a39ac",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Activate pass with given date",
        "query": "UPDATE\n\t\"dynamic\".\"Passes\"\nSET\n\t\"activationDate\" = $date\nWHERE\n\t\"ticketID\" = $ticketID\n\tAND \"transactionID\" = $transID\n\tAND \"activationDate\" IS NULL\nRETURNING\n\t\"ticketID\", \"transactionID\", \"activationDate\";",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2300,
        "y": 2680,
        "wires": [
            [
                "b29b6f34c8f5d334"
            ]
        ]
    },
    {
        "id": "9d62f383a62704cf",
        "type": "debug",
        "z": "216f0e6810bad0c9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 2140,
        "wires": []
    },
    {
        "id": "285db8d436534587",
        "type": "postgresql",
        "z": "216f0e6810bad0c9",
        "name": "Set session timezone",
        "query": "SET TIME ZONE 'Australia/Melbourne';",
        "postgreSQLConfig": "c8ab439c6aeb96e1",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 220,
        "y": 560,
        "wires": [
            [
                "0f7012e50c5181f0",
                "76712dbf4477aaac",
                "04992652fc426024",
                "0d7e9812870ead24"
            ]
        ]
    }
]